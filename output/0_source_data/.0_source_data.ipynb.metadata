{"timestamp": 1728240381.260868, "stored_source_code": "# declare a list tasks whose products you want to use as inputs\nupstream = None\n## Obesity Dataset Import and analysis\n\nThis notebook performs an analysis on the Obesity Dataset. The dataset contains various features related to obesity and lifestyle habits.\n\n### Steps:\n1. Load the dataset from an Excel file.\n2. Map categorical variables to more readable labels.\n3. Some first visualizations\n4. Save the processed dataset to a CSV file for further use in later scripts\n\n### Dataset Information:\n- **Sex**: Gender of the individual.\n- **Overweight_Obese_Family**: Family history of being overweight or obese.\n- **Consumption_of_Fast_Food**: Frequency of fast food consumption.\n- **Frequency_of_Consuming_Vegetables**: Frequency of vegetable consumption.\n- **Number_of_Main_Meals_Daily**: Number of main meals consumed daily.\n- **Food_Intake_Between_Meals**: Frequency of food intake between meals.\n- **Smoking**: Smoking habits.\n- **Liquid_Intake_Daily**: Daily liquid intake.\n- **Calculation_of_Calorie_Intake**: Whether the individual calculates their calorie intake.\n- **Physical_Excercise**: Physical exercise habits.\n- **Schedule_Dedicated_to_Technology**: Time dedicated to technology use.\n- **Type_of_Transportation_Used**: Type of transportation used.\n- **Class**: Obesity class of the individual.\n\nThe following sections will provide detailed insights and visualizations based on the dataset.\n\n\n# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotnine import ggplot, aes, geom_bar, theme_minimal, labs, theme, element_text\nimport IPython\nimport json\n\n# file path to data\nfilename = \"/Users/lukastang/Documents/GitHub/Model_Interpretability/data/Obesity_Dataset.xlsx\"\n\n# Read the Excel file\n# Define the relative path to the folder and the Excel file\nobesity_dataset = pd.read_excel(filename , sheet_name=\"obesity_dataset\")\nobesity_dataset_mappings = pd.read_excel(filename, sheet_name=\"mappings\")\n\n# Print the head of the dataset\nprint(obesity_dataset.head())\n\ndef map_variable(df, mappings, variable):\n    \"\"\"\n    Maps the values of a specified variable in a DataFrame to new values based on a provided mapping DataFrame.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame containing the variable to be mapped.\n        mappings (pandas.DataFrame): A DataFrame containing the mapping information. \n                                     It should have columns 'Variable', 'Value', and 'Mapping'.\n        variable (str): The name of the variable in `df` to be mapped.\n\n    Returns:\n        None: The function modifies the input DataFrame `df` in place, adding a new column \n              with the mapped values. The new column is named as the original variable \n              with '_mapped' appended to it.\n    \"\"\"\n    mapping_dict = mappings[mappings['Variable'] == variable].set_index('Value')['Mapping'].to_dict()\n    df[variable + '_mapped'] = df[variable].map(mapping_dict)\n\n# List of variables to map\nvariables_to_map = [\n    'Sex', 'Overweight_Obese_Family', 'Consumption_of_Fast_Food', \n    'Frequency_of_Consuming_Vegetables', 'Number_of_Main_Meals_Daily', \n    'Food_Intake_Between_Meals', 'Smoking', 'Liquid_Intake_Daily', \n    'Calculation_of_Calorie_Intake', 'Physical_Excercise', \n    'Schedule_Dedicated_to_Technology', 'Type_of_Transportation_Used', 'Class'\n]\n\n# Looping through the variables and mapping\nfor variable in variables_to_map:\n    map_variable(obesity_dataset, obesity_dataset_mappings, variable)\n\n# Removing non-mapped variables\nobesity_dataset.drop(columns=variables_to_map, inplace=True)\n\n# Print the head of the dataset with mapped variables\nprint(obesity_dataset.head())\n\n# Extract the order of categories from the mappings DataFrame\ndef extract_order(mappings, variable):\n    \"\"\"\n    Extracts the order of categories for a specified variable from the mappings DataFrame.\n\n    Args:\n        mappings (pandas.DataFrame): A DataFrame containing the mapping information.\n                                     It should have columns 'Variable', 'Value', 'Mapping', and 'Order'.\n        variable (str): The name of the variable to extract the order for.\n\n    Returns:\n        list: A list of categories in the specified order.\n    \"\"\"\n    return mappings[mappings['Variable'] == variable].sort_values(by='Value')['Mapping'].tolist()\n\ndef set_categorical_order(df, mappings, variables=[\n    'Class', 'Frequency_of_Consuming_Vegetables', 'Number_of_Main_Meals_Daily',\n    'Food_Intake_Between_Meals', 'Liquid_Intake_Daily', \n    'Schedule_Dedicated_to_Technology'\n]):\n    \"\"\"\n    Sets the categorical order for specified variables in a DataFrame based on a provided mapping DataFrame.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame containing the variables to be ordered.\n        mappings (pandas.DataFrame): A DataFrame containing the mapping information.\n                                     It should have columns 'Variable', 'Value', 'Mapping', and 'Order'.\n        variables (list): A list of variable names to set the categorical order for.\n\n    Returns:\n        None: The function modifies the input DataFrame `df` in place, setting the categorical order for specified variables.\n    \"\"\"\n    for variable in variables:\n        ordered_categories = extract_order(mappings, variable)\n        df[variable + '_mapped'] = pd.Categorical(\n            df[variable + '_mapped'], \n            categories=ordered_categories, \n            ordered=True\n        )\n\n# Set the categorical order for the specified variables\nset_categorical_order(obesity_dataset, obesity_dataset_mappings)\n\n# Some Visualizations\n\n# Plot distribution of the mapped 'Class' variable using plotnine\n# Ensure the correct order of the 'Class_mapped' variable\n\nplot = (\n    ggplot(obesity_dataset, aes(x='Class_mapped', fill='Sex_mapped')) +\n    geom_bar(position='dodge') +\n    theme_minimal() +\n    labs(title='Distribution of Obesity Classes by Sex', x='Obesity Class', y='Count') +\n    theme(axis_text_x=element_text(rotation=45, hjust=1))\n)\n\nprint(plot)\n\n# Save the processed dataset to a CSV file\nprocessed_dataset_filename = \"output/0_source_data/Processed_Obesity_Dataset.csv\"\nobesity_dataset.to_csv(processed_dataset_filename, index=False)\n\n# Save the mappings to a CSV file\nmappings_filename = \"output/0_source_data/Obesity_Dataset_Mappings.csv\"\nobesity_dataset_mappings.to_csv(mappings_filename, index=False)", "params": {}}